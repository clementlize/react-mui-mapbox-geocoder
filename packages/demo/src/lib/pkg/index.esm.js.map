{"version":3,"file":"index.esm.js","sources":["../src/MatGeocoder/debouncedProgressBar/debouncedProgressBar.tsx","../src/MatGeocoder/MatGeocoder.tsx","../src/hooks/usePrevious.ts","../src/MatGeocoder/search.ts"],"sourcesContent":["import React, {useState} from 'react';\nimport {Fade, LinearProgress} from '@material-ui/core';\nimport {useDebouncedCallback} from 'use-debounce';\nimport {useEffect} from 'react';\n\ntype Props = {\n  show: boolean;\n};\n\nconst debouncedProgressBar = ({show: showProp = false}: Props) => {\n  const [show, setShow] = useState(showProp);\n  useEffect(() => {\n    if (showProp) {\n      setShowTrue();\n    } else {\n      setShowTrue.flush();\n      setShow(false);\n    }\n  }, [showProp]);\n  const setShowTrue = useDebouncedCallback(() => setShow(true), 250);\n\n  return (\n    <Fade in={show}>\n      <LinearProgress style={{position: 'absolute', width: '100%'}} />\n    </Fade>\n  );\n};\n\nexport default debouncedProgressBar;\n","import React, {useState, useCallback, useEffect, useRef} from 'react';\nimport search from './search';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport {\n  Fade,\n  Grid,\n  IconButton,\n  InputAdornment,\n  MenuItem,\n  Paper,\n  TextField,\n  Theme,\n  Typography,\n  PaperProps,\n  TextFieldProps,\n  createStyles,\n  makeStyles,\n} from '@material-ui/core';\nimport usePrevious from '../hooks/usePrevious';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport clsx from 'clsx';\nimport DebouncedProgressBar from './debouncedProgressBar/debouncedProgressBar';\nimport alpha from 'color-alpha';\n\ntype Props = {\n  inputValue?: string;\n  endpoint?: string;\n  source?: string;\n  inputPlaceholder?: string;\n  accessToken: string;\n  proximity?: {longitude: number; latitude: number};\n  country?: string;\n  bbox?: number[];\n  types?: string;\n  limit?: number;\n  autocomplete?: boolean;\n  language?: string;\n  showLoader?: boolean;\n  focusOnMount?: boolean;\n  onSelect: (param: any) => void;\n  onSuggest?: (results: any[]) => void;\n  onInputBlur?: (event: any) => void;\n  onInputFocus?: (event: any) => void;\n  inputClasses?: any; // Override css classes to input.\n  inputPaperProps?: Partial<PaperProps>; // Override input container props.\n  suggestionsPaperProps?: PaperProps; // Override suggestions container props.\n  inputTextFieldProps?: TextFieldProps;\n  showInputContainer?: boolean;\n  disableUnderline?: boolean;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      flexGrow: 1,\n      position: 'relative',\n    },\n    suggestionsContainerOpen: {\n      position: 'absolute',\n      zIndex: 1,\n      marginTop: theme.spacing(1),\n      left: 0,\n      right: 0,\n    },\n    suggestion: {\n      display: 'block',\n      marginBottom: 0,\n    },\n    suggestionsList: {\n      margin: 0,\n      padding: 0,\n      listStyleType: 'none',\n    },\n    inputContainer: {\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n      paddingRight: theme.spacing(1), // IconButton on right provides sufficient padding\n      paddingLeft: theme.spacing(2),\n      backgroundColor: alpha(theme.palette.background.paper, 0.9),\n      overflow: 'hidden',\n      '&:hover,&:active,&.inputContainerFocused': {\n        backgroundColor: theme.palette.background.paper,\n      },\n      // Maintain a consistent height when IconButton (CancelIcon) is visible.\n      minHeight: '64px',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      //...\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    shrink: {\n      flexShrink: 1,\n    },\n    noGrow: {\n      flexGrow: 0,\n    },\n    noShrink: {\n      flexShrink: 0,\n    },\n  })\n);\n\n/**\n * Geocoder component: connects to Mapbox.com Geocoding API\n * and provides an auto-completing interface for finding locations.\n */\nconst MatGeocoder = ({\n  endpoint = 'https://api.mapbox.com',\n  inputPlaceholder = 'Search',\n  showLoader = true,\n  source = 'mapbox.places',\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onSuggest = () => {},\n  focusOnMount = false,\n  showInputContainer = true,\n  inputValue = '',\n  proximity,\n  country,\n  bbox,\n  types,\n  limit,\n  autocomplete,\n  language,\n  suggestionsPaperProps,\n  onSelect,\n  accessToken,\n  onInputFocus,\n  onInputBlur,\n  inputClasses,\n  inputTextFieldProps,\n  disableUnderline,\n  inputPaperProps,\n}: Props) => {\n  const [results, setResults] = useState<any[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [searchTime, setSearchTime] = useState<Date>(new Date());\n  const [value, setValue] = useState<string>(inputValue);\n  const [inputIsFocused, setInputIsFocused] = useState<boolean>(false);\n  const classes = useStyles();\n\n  const autoSuggestRef = useRef<Autosuggest>(null);\n  const prevValue = usePrevious<string>(value);\n\n  const focusInput = useCallback(() => {\n    const {input = null} = autoSuggestRef.current || {};\n    input && input.focus();\n  }, []);\n\n  useEffect(() => {\n    setValue(inputValue);\n  }, [inputValue]);\n\n  useEffect(() => {\n    if (focusOnMount) {\n      focusInput();\n    }\n  }, [focusOnMount, focusInput]);\n\n  useEffect(() => {\n    onSuggest && onSuggest(results);\n  }, [results, onSuggest]);\n\n  const handleClearInput = useCallback(() => {\n    setValue('');\n    // After clear button is clicked the input should be re-focused automatically.\n    focusInput();\n  }, [focusInput]);\n\n  const renderInput = useCallback(\n    (renderInputProps) => {\n      const {ref, inputClasses, ...other} = renderInputProps;\n      const {className, ...restInputPaperProps} = inputPaperProps ?? {};\n\n      const inputTextField = (\n        <TextField\n          fullWidth\n          InputProps={{\n            disableUnderline,\n            inputRef: ref,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon color=\"action\" />\n              </InputAdornment>\n            ),\n            classes: inputClasses,\n            ...other,\n          }}\n          {...inputTextFieldProps}\n        />\n      );\n\n      return showInputContainer ? (\n        <>\n          <DebouncedProgressBar show={loading && showLoader} />\n          <Paper\n            square={false}\n            elevation={1}\n            className={clsx([\n              classes.inputContainer,\n              {\n                inputContainerFocused: inputIsFocused,\n              },\n              className,\n            ])}\n            {...restInputPaperProps}\n          >\n            <Grid container alignItems=\"center\" spacing={1} wrap=\"nowrap\">\n              <Grid item xs className={clsx(classes.grow, classes.noShrink)}>\n                {inputTextField}\n              </Grid>\n              {/* Unmount and mount releases space for TexField to grow AND show animation. */}\n              <Fade\n                in={value.length > 0}\n                unmountOnExit={true}\n                mountOnEnter={true}\n              >\n                <Grid item xs className={clsx(classes.shrink, classes.noGrow)}>\n                  <IconButton\n                    aria-label=\"Clear Search Input\"\n                    onClick={handleClearInput}\n                  >\n                    <CancelIcon />\n                  </IconButton>\n                </Grid>\n              </Fade>\n            </Grid>\n          </Paper>\n        </>\n      ) : (\n        <>{inputTextField}</>\n      );\n    },\n    [\n      disableUnderline,\n      inputTextFieldProps,\n      showInputContainer,\n      loading,\n      showLoader,\n      classes,\n      inputIsFocused,\n      inputPaperProps,\n      value.length,\n      handleClearInput,\n    ]\n  );\n\n  const focusInputHandler = useCallback(\n    (e: React.FocusEvent<any>) => {\n      setInputIsFocused(true);\n      onInputFocus && onInputFocus(e);\n    },\n    [onInputFocus]\n  );\n\n  const blurInputHandler = useCallback(\n    (e) => {\n      setInputIsFocused(false);\n      onInputBlur && onInputBlur(e);\n    },\n    [onInputBlur]\n  );\n\n  const renderSuggestionsContainer = useCallback(\n    (options) => {\n      const {containerProps, children} = options;\n      return (\n        <Paper\n          {...containerProps}\n          square={false}\n          elevation={4}\n          {...suggestionsPaperProps}\n        >\n          {children}\n        </Paper>\n      );\n    },\n    [suggestionsPaperProps]\n  );\n\n  const onResult = useCallback(\n    (err: any, fc: any, st: Date) => {\n      // searchTime is compared with the last search to set the state\n      // to ensure that a slow xhr response does not scramble the\n      // sequence of autocomplete display.\n      if (!err && fc && fc.features && searchTime <= st) {\n        setSearchTime(st);\n        setResults(\n          fc.features\n            .map((feature: any) => ({\n              feature: feature,\n              label: feature.place_name,\n            }))\n            .filter((feature: any) => feature.label)\n        );\n        setLoading(false);\n      }\n    },\n    [searchTime]\n  );\n\n  const handleSuggestionsFetchRequested = useCallback(\n    ({value}) => {\n      setLoading(true);\n      if (prevValue === value) {\n        setLoading(false);\n      } else if (value === '') {\n        setResults([]);\n        setLoading(false);\n      } else {\n        search(\n          endpoint,\n          source,\n          accessToken,\n          value,\n          onResult,\n          proximity,\n          country,\n          bbox,\n          types,\n          limit,\n          autocomplete,\n          language\n        );\n      }\n    },\n    [\n      bbox,\n      country,\n      endpoint,\n      limit,\n      language,\n      autocomplete,\n      source,\n      proximity,\n      prevValue,\n      onResult,\n      types,\n      accessToken,\n    ]\n  );\n\n  /**\n   * Parameters Signature:\n   * (event, {suggestion, suggestionValue, suggestionIndex, sectionIndex, method})\n   */\n  const handleSuggestionSelected = useCallback(\n    (_event, {suggestion}) => {\n      onSelect && onSelect(suggestion.feature);\n      // focus on the input after click to maintain key traversal\n      // this.inputRef.current && this.inputRef.current.focus()\n      return false;\n    },\n    [onSelect]\n  );\n\n  const handleSuggestionsClearRequested = useCallback(() => {\n    setResults([]);\n  }, []);\n\n  const handleChange = useCallback((_event, {newValue}) => {\n    setValue(newValue);\n  }, []);\n\n  const renderSuggestion = useCallback((suggestion, {query, isHighlighted}) => {\n    const matches = match(suggestion.label, query);\n    const parts = parse(suggestion.label, matches);\n\n    return (\n      <MenuItem selected={isHighlighted} component=\"div\">\n        <Typography noWrap variant=\"subtitle1\">\n          {parts.map(\n            (part: {highlight: boolean; text: string}, index: number) => {\n              return part.highlight ? (\n                <span key={String(index)} style={{fontWeight: 500}}>\n                  {part.text}\n                </span>\n              ) : (\n                <strong key={String(index)} style={{fontWeight: 300}}>\n                  {part.text}\n                </strong>\n              );\n            }\n          )}\n        </Typography>\n      </MenuItem>\n    );\n  }, []);\n\n  const getResultValue = useCallback((result: any) => result.label, []);\n\n  if (!accessToken) {\n    return null;\n  }\n\n  return (\n    <Autosuggest\n      ref={autoSuggestRef}\n      theme={{\n        container: classes.container,\n        suggestionsContainerOpen: classes.suggestionsContainerOpen,\n        suggestionsList: classes.suggestionsList,\n        suggestion: classes.suggestion,\n      }}\n      renderInputComponent={renderInput}\n      suggestions={results}\n      onSuggestionsFetchRequested={handleSuggestionsFetchRequested}\n      onSuggestionsClearRequested={handleSuggestionsClearRequested}\n      onSuggestionSelected={handleSuggestionSelected}\n      renderSuggestionsContainer={renderSuggestionsContainer}\n      getSuggestionValue={getResultValue}\n      renderSuggestion={renderSuggestion}\n      inputProps={{\n        placeholder: inputPlaceholder,\n        value: value,\n        onChange: handleChange,\n        onFocus: focusInputHandler,\n        onBlur: blurInputHandler,\n        className: inputClasses,\n      }}\n    />\n  );\n};\n\nexport default MatGeocoder;\n","import {useEffect, useRef} from 'react';\n\nfunction usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n\n  // ... and can hold any value, similar to an instance property on a class\n\n  const ref = useRef<T>();\n\n  // Store current value in ref\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}\n\nexport default usePrevious;\n","import omitBy from 'lodash.omitby';\nimport isNil from 'lodash.isnil';\n\nexport default async function search(\n  endpoint: string,\n  source: string,\n  accessToken: string,\n  query: string,\n  onResult: (err: any, res: Response | null, searchTime: Date) => void,\n  proximity?: {longitude: number; latitude: number},\n  country?: string,\n  bbox?: number[],\n  types?: string,\n  limit?: number,\n  autocomplete?: boolean,\n  language?: string\n) {\n  const searchTime = new Date();\n  try {\n    const baseUrl = `${endpoint}/geocoding/v5/${source}/${query}.json`;\n    // Don't send empty query params to Mapbox geocoding api.\n    const searchParams = omitBy(\n      {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        access_token: accessToken,\n        proximity:\n          proximity && Object.keys(proximity).length === 2\n            ? `${proximity.longitude},${proximity.latitude}`\n            : null,\n        bbox: bbox && bbox.length > 0 ? bbox.join(',') : null,\n        types,\n        country,\n        limit,\n        autocomplete,\n        language,\n      },\n      isNil\n    );\n    const url = `${baseUrl}?${toUrlString(searchParams)}`;\n    const res = await fetch(url);\n    const data = await res.json();\n    onResult(null, data, searchTime);\n    return {err: null, res, searchTime};\n  } catch (err) {\n    onResult(err, null, searchTime);\n    return {err, res: null, searchTime};\n  }\n}\n\nfunction toUrlString(params: any) {\n  return Object.keys(params)\n    .map(\n      (key) => encodeURIComponent(key) + '=' + encodeURIComponent(params[key])\n    )\n    .join('&');\n}\n"],"names":["debouncedProgressBar","show","showProp","useState","setShow","useEffect","setShowTrue","flush","useDebouncedCallback","React","Fade","in","LinearProgress","style","position","width","useStyles","makeStyles","theme","createStyles","container","flexGrow","suggestionsContainerOpen","zIndex","marginTop","spacing","left","right","suggestion","display","marginBottom","suggestionsList","margin","padding","listStyleType","inputContainer","paddingTop","paddingBottom","paddingRight","paddingLeft","backgroundColor","alpha","palette","background","paper","overflow","minHeight","flexDirection","justifyContent","grow","shrink","flexShrink","noGrow","noShrink","endpoint","inputPlaceholder","showLoader","source","onSuggest","focusOnMount","showInputContainer","inputValue","proximity","country","bbox","types","limit","autocomplete","language","suggestionsPaperProps","onSelect","accessToken","onInputFocus","onInputBlur","inputClasses","inputTextFieldProps","disableUnderline","inputPaperProps","results","setResults","loading","setLoading","Date","searchTime","setSearchTime","value","setValue","inputIsFocused","setInputIsFocused","classes","autoSuggestRef","useRef","prevValue","ref","current","usePrevious","focusInput","useCallback","input","focus","handleClearInput","renderInput","renderInputProps","other","className","restInputPaperProps","inputTextField","TextField","fullWidth","InputProps","inputRef","startAdornment","InputAdornment","SearchIcon","color","DebouncedProgressBar","Paper","square","elevation","clsx","inputContainerFocused","Grid","alignItems","wrap","item","xs","length","unmountOnExit","mountOnEnter","IconButton","onClick","CancelIcon","focusInputHandler","e","blurInputHandler","renderSuggestionsContainer","options","children","containerProps","onResult","err","fc","st","features","map","feature","label","place_name","filter","handleSuggestionsFetchRequested","query","baseUrl","searchParams","url","res","omitBy","access_token","Object","keys","longitude","latitude","join","isNil","params","key","encodeURIComponent","fetch","json","search","handleSuggestionSelected","_event","handleSuggestionsClearRequested","handleChange","newValue","renderSuggestion","isHighlighted","matches","match","parts","parse","MenuItem","selected","component","Typography","noWrap","variant","part","index","highlight","String","fontWeight","text","getResultValue","result","Autosuggest","renderInputComponent","suggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","getSuggestionValue","inputProps","placeholder","onChange","onFocus","onBlur"],"mappings":"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"}