{"version":3,"file":"index.modern.mjs","sources":["../src/MatGeocoder/search.ts","../src/MatGeocoder/debouncedProgressBar/debouncedProgressBar.tsx","../src/MatGeocoder/MatGeocoder.tsx","../src/hooks/usePrevious.ts"],"sourcesContent":["export default async function search(\n  endpoint: string,\n  source: string,\n  accessToken: string,\n  query: string,\n  onResult: (err: any, res: Response | null, searchTime: Date) => void,\n  proximity?: {longitude: number; latitude: number},\n  country?: string,\n  bbox?: number[],\n  types?: string,\n  limit?: number,\n  autocomplete?: boolean,\n  language?: string\n) {\n  const searchTime = new Date();\n  try {\n    const baseUrl = `${endpoint}/geocoding/v5/${source}/${query}.json`;\n    // Don't send empty query params to Mapbox geocoding api.\n    const searchParams = {\n      ...(isNotNil(accessToken) && {access_token: accessToken}),\n      ...(isNotNil(proximity) && {\n        proximity:\n          proximity && Object.keys(proximity).length === 2\n            ? `${proximity.longitude},${proximity.latitude}`\n            : null,\n      }),\n      ...(isNotNil(bbox) && {\n        bbox: bbox && bbox.length > 0 ? bbox.join(',') : null,\n      }),\n\n      ...(isNotNil(types) && {\n        types,\n      }),\n      ...(isNotNil(country) && {\n        country,\n      }),\n      ...(isNotNil(limit) && {\n        limit,\n      }),\n      ...(isNotNil(autocomplete) && {\n        autocomplete,\n      }),\n      ...(isNotNil(language) && {\n        language,\n      }),\n    };\n    const url = `${baseUrl}?${toUrlString(searchParams)}`;\n    const res = await fetch(url);\n    const data = await res.json();\n    onResult(null, data, searchTime);\n    return {err: null, res, searchTime};\n  } catch (err) {\n    onResult(err, null, searchTime);\n    return {err, res: null, searchTime};\n  }\n}\n\nfunction toUrlString(params: any) {\n  return Object.keys(params)\n    .map(\n      (key) => encodeURIComponent(key) + '=' + encodeURIComponent(params[key])\n    )\n    .join('&');\n}\n\nfunction isNotNil(value: unknown) {\n  return value !== undefined && value !== null;\n}\n","import React, {useState, useEffect} from 'react';\nimport {Fade, LinearProgress} from '@mui/material';\nimport {useDebouncedCallback} from 'use-debounce';\n\ntype Props = {\n  show: boolean;\n};\n\nconst DebouncedProgressBar = ({show: showProp = false}: Props) => {\n  const [show, setShow] = useState(showProp);\n\n  const setShowTrue = useDebouncedCallback(() => setShow(true), 250);\n\n  useEffect(() => {\n    if (showProp) {\n      setShowTrue();\n    } else {\n      setShowTrue.flush();\n      setShow(false);\n    }\n  }, [setShowTrue, showProp]);\n\n  return (\n    <Fade in={show}>\n      <LinearProgress style={{position: 'absolute', width: '100%'}} />\n    </Fade>\n  );\n};\n\nexport default DebouncedProgressBar;\n","import React, {useState, useCallback, useEffect, useRef} from 'react';\nimport search from './search';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport {\n  Fade,\n  IconButton,\n  InputAdornment,\n  MenuItem,\n  useTheme,\n  Box,\n  Paper,\n  Typography,\n  PaperProps,\n  alpha,\n  InputBase,\n  InputBaseProps,\n  TextField,\n  TextFieldProps,\n} from '@mui/material';\nimport usePrevious from '../hooks/usePrevious';\nimport SearchIcon from '@mui/icons-material/Search';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport DebouncedProgressBar from './debouncedProgressBar/debouncedProgressBar';\nimport {Result} from './Result';\n\ntype Props = {\n\n  /**\n   * Anytime this value changed, the user input will be overriden with it. WARN: This is not a callback, inputValue won't change when the user types.\n   */\n  inputValue?: string;\n\n  endpoint?: string;\n  source?: string;\n  inputPlaceholder?: string;\n  accessToken: string;\n  proximity?: {longitude: number; latitude: number};\n  country?: string;\n  bbox?: number[];\n  types?: string;\n  limit?: number;\n  autocomplete?: boolean;\n  language?: string;\n  showLoader?: boolean;\n  focusOnMount?: boolean;\n  onSelect: (param: any) => void;\n  onSuggest?: (results: any[]) => void;\n  onInputBlur?: (event: any) => void;\n  onInputFocus?: (event: any) => void;\n\n  /**\n   * Override css classes to input.\n   */\n  inputClasses?: any; \n\n  /**\n   * Override input container props.\n   */\n  inputPaperProps?: Partial<PaperProps>;\n\n  /**\n   * Override suggestions container props.\n   */\n  suggestionsPaperProps?: PaperProps;\n\n  /**\n   * If textFieldsProps is provided, these props will be ignored.\n   */\n  inputProps?: Partial<InputBaseProps>;\n\n  /**\n   * Specify if you want the input to be a TextField instead of a MUI input. rawInputProps will be ignored.\n   */\n  textFieldProps?: Partial<TextFieldProps>;\n  \n  showInputContainer?: boolean;\n};\n\nconst SearchInput = ({...props}: Partial<InputBaseProps>) => {\n  return (\n    <InputBase\n      type=\"search\"\n      fullWidth\n      startAdornment={\n        <InputAdornment position=\"start\">\n          <SearchIcon color=\"action\" />\n        </InputAdornment>\n      }\n      {...props}\n    />\n  );\n};\n\nconst SearchTextField = ({...props}: Partial<TextFieldProps>) => {\n  return (\n    <TextField\n      type=\"search\"\n      fullWidth\n      InputProps={{\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <SearchIcon color=\"action\" />\n          </InputAdornment>\n        ),\n      }}\n      {...props}\n    />\n  );\n};\n\n/**\n * Geocoder component: connects to Mapbox.com Geocoding API\n * and provides an auto-completing interface for finding locations.\n */\nconst MatGeocoder = ({\n  endpoint = 'https://api.mapbox.com',\n  inputPlaceholder = 'Search',\n  showLoader = true,\n  source = 'mapbox.places',\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onSuggest = () => {},\n  focusOnMount = false,\n  showInputContainer = true,\n  inputValue = '',\n  proximity,\n  country,\n  bbox,\n  types,\n  limit,\n  autocomplete,\n  language,\n  suggestionsPaperProps,\n  onSelect,\n  accessToken,\n  onInputFocus,\n  onInputBlur,\n  inputClasses,\n  inputProps: inputPropsParam,\n  textFieldProps,\n  inputPaperProps,\n}: Props) => {\n\n  const [results, setResults] = useState<Result[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [searchTime, setSearchTime] = useState(new Date());\n  const [value, setValue] = useState(inputValue);\n  const [inputIsFocused, setInputIsFocused] = useState(false);\n\n  const autoSuggestRef = useRef<Autosuggest>(null);\n  const prevValue = usePrevious(value);\n\n  const focusInput = useCallback(() => {\n    const {input = null} = autoSuggestRef.current || {};\n    input && input.focus();\n  }, []);\n\n  useEffect(() => {\n    setValue(inputValue);\n  }, [inputValue]);\n\n  useEffect(() => {\n    if (focusOnMount) {\n      focusInput();\n    }\n  }, [focusOnMount, focusInput]);\n\n  useEffect(() => {\n    onSuggest && onSuggest(results);\n  }, [results, onSuggest]);\n\n  const handleClearInput = useCallback(() => {\n    setValue('');\n    // After clear button is clicked the input should be re-focused automatically.\n    focusInput();\n  }, [focusInput]);\n\n  const theme = useTheme();\n\n  const renderInput = useCallback(\n\n    (renderInputProps) => {\n\n      const {ref, inputClasses, ...other} = renderInputProps;\n      const {...restInputPaperProps} = inputPaperProps ?? {};\n\n      let searchInput = (\n        <SearchInput\n          classes={inputClasses}\n          inputRef={ref}\n          {...other}\n          {...inputPropsParam}\n        />\n      );\n\n      if (textFieldProps) {\n        searchInput = (\n          <SearchTextField\n            classes={inputClasses}\n            inputRef={ref}\n            {...other}\n            {...textFieldProps}\n          />\n        )\n      }\n\n      if (!showInputContainer) {\n        return searchInput;\n      }\n\n      return (\n        <>\n          <DebouncedProgressBar show={loading && showLoader} />\n          <Paper\n            square={false}\n            elevation={1}\n            sx={{\n              paddingTop: 1,\n              paddingBottom: 1,\n              paddingRight: 1, // IconButton on right provides sufficient padding\n              paddingLeft: 2,\n              backgroundColor: inputIsFocused\n                ? theme.palette.background.paper\n                : alpha(theme.palette.background.paper, 0.9),\n              overflow: 'hidden',\n              '&:hover,&:active': {\n                backgroundColor: theme.palette.background.paper,\n              },\n              // Maintain a consistent height when IconButton (CancelIcon) is visible.\n              minHeight: '64px',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              //...\n            }}\n            {...restInputPaperProps}\n          >\n            <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n              <Box flex=\"auto\" sx={{flexShrink: 0, flexGrow: 1}}>\n                {searchInput}\n              </Box>\n              {/* Unmount and mount releases space for TexField to grow AND show animation. */}\n              <Fade\n                in={value.length > 0}\n                unmountOnExit={true}\n                mountOnEnter={true}\n              >\n                <Box\n                  flex=\"auto\"\n                  sx={{\n                    flexGrow: 0,\n                    flexShrink: 1,\n                  }}\n                >\n                  <IconButton\n                    aria-label=\"Clear Search Input\"\n                    onClick={handleClearInput}\n                    size=\"large\"\n                  >\n                    <CancelIcon />\n                  </IconButton>\n                </Box>\n              </Fade>\n            </Box>\n          </Paper>\n        </>\n      );\n    },\n    [\n      inputPropsParam,\n      textFieldProps,\n      showInputContainer,\n      loading,\n      showLoader,\n      inputIsFocused,\n      inputPaperProps,\n      value.length,\n      handleClearInput,\n      theme,\n    ]\n  );\n\n  const focusInputHandler = useCallback(\n    (e: React.FocusEvent<any>) => {\n      setInputIsFocused(true);\n      onInputFocus && onInputFocus(e);\n    },\n    [onInputFocus]\n  );\n\n  const blurInputHandler = useCallback(\n    (e) => {\n      setInputIsFocused(false);\n      onInputBlur && onInputBlur(e);\n    },\n    [onInputBlur]\n  );\n\n  const renderSuggestionsContainer = useCallback(\n    (options) => {\n      const {containerProps, children} = options;\n      return (\n        <Paper\n          {...containerProps}\n          square={false}\n          elevation={4}\n          {...suggestionsPaperProps}\n        >\n          {children}\n        </Paper>\n      );\n    },\n    [suggestionsPaperProps]\n  );\n\n  const onResult = useCallback(\n    (err: any, fc: any, st: Date) => {\n      // searchTime is compared with the last search to set the state\n      // to ensure that a slow xhr response does not scramble the\n      // sequence of autocomplete display.\n      if (!err && fc && fc.features && searchTime <= st) {\n        setSearchTime(st);\n        setResults(\n          fc.features\n            .map((feature: any) => ({\n              feature: feature,\n              label: feature.place_name,\n            }))\n            .filter((feature: any) => feature.label)\n        );\n        setLoading(false);\n      }\n    },\n    [searchTime]\n  );\n\n  const handleSuggestionsFetchRequested = useCallback(\n    ({value}) => {\n      setLoading(true);\n      if (prevValue === value) {\n        setLoading(false);\n      } else if (value === '') {\n        setResults([]);\n        setLoading(false);\n      } else {\n        search(\n          endpoint,\n          source,\n          accessToken,\n          value,\n          onResult,\n          proximity,\n          country,\n          bbox,\n          types,\n          limit,\n          autocomplete,\n          language\n        );\n      }\n    },\n    [\n      bbox,\n      country,\n      endpoint,\n      limit,\n      language,\n      autocomplete,\n      source,\n      proximity,\n      prevValue,\n      onResult,\n      types,\n      accessToken,\n    ]\n  );\n\n  /**\n   * Parameters Signature:\n   * (event, {suggestion, suggestionValue, suggestionIndex, sectionIndex, method})\n   */\n  const handleSuggestionSelected = useCallback(\n    (_event, {suggestion}) => {\n      onSelect && onSelect(suggestion.feature);\n      // focus on the input after click to maintain key traversal\n      // this.inputRef.current && this.inputRef.current.focus()\n      return false;\n    },\n    [onSelect]\n  );\n\n  const handleSuggestionsClearRequested = useCallback(() => {\n    setResults([]);\n  }, []);\n\n  const handleChange = useCallback((_event, {newValue}) => {\n    setValue(newValue);\n  }, []);\n\n  const renderSuggestion = useCallback((suggestion, {query, isHighlighted}) => {\n    const matches = match(suggestion.label, query);\n    const parts = parse(suggestion.label, matches);\n\n    return (\n      <MenuItem selected={isHighlighted} component=\"div\">\n        <Typography noWrap variant=\"subtitle1\">\n          {parts.map(\n            (part: {highlight: boolean; text: string}, index: number) => (\n              <Typography\n                key={index}\n                component=\"span\"\n                variant=\"inherit\"\n                sx={{fontWeight: part.highlight ? 500 : 300}}\n              >\n                {part.text}\n              </Typography>\n            )\n          )}\n        </Typography>\n      </MenuItem>\n    );\n  }, []);\n\n  const getResultValue = useCallback((result: any) => result.label, []);\n\n  if (!accessToken) {\n    return null;\n  }\n\n  return (\n    <Box\n      sx={{\n        // https://github.com/moroshko/react-autosuggest#theme-optional\n        '& .react-autosuggest__container': {\n          flexGrow: 1,\n          position: 'relative',\n        },\n        '& .react-autosuggest__suggestions-container--open': {\n          position: 'absolute',\n          zIndex: 1,\n          marginTop: 1,\n          left: 0,\n          right: 0,\n        },\n        '& .react-autosuggest__suggestions-list': {\n          margin: 0,\n          padding: 0,\n          listStyleType: 'none',\n        },\n        '& .react-autosuggest__suggestion': {\n          display: 'block',\n          marginBottom: 0,\n        },\n      }}\n    >\n      <Autosuggest\n        ref={autoSuggestRef}\n        renderInputComponent={renderInput}\n        suggestions={results}\n        onSuggestionsFetchRequested={handleSuggestionsFetchRequested}\n        onSuggestionsClearRequested={handleSuggestionsClearRequested}\n        onSuggestionSelected={handleSuggestionSelected}\n        renderSuggestionsContainer={renderSuggestionsContainer}\n        getSuggestionValue={getResultValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={{\n          placeholder: inputPlaceholder,\n          value: value,\n          onChange: handleChange,\n          onFocus: focusInputHandler,\n          onBlur: blurInputHandler,\n          className: inputClasses,\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default MatGeocoder;\n","import {useEffect, useRef} from 'react';\n\nfunction usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n\n  // ... and can hold any value, similar to an instance property on a class\n\n  const ref = useRef<T>();\n\n  // Store current value in ref\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}\n\nexport default usePrevious;\n"],"names":["isNotNil","value","DebouncedProgressBar","show","showProp","setShow","useState","setShowTrue","useDebouncedCallback","useEffect","flush","React","createElement","Fade","in","LinearProgress","style","position","width","SearchInput","_ref","props","_extends","InputBase","type","fullWidth","startAdornment","InputAdornment","SearchIcon","color","SearchTextField","_ref2","TextField","InputProps","MatGeocoder","endpoint","inputPlaceholder","showLoader","source","onSuggest","focusOnMount","showInputContainer","inputValue","proximity","country","bbox","types","limit","autocomplete","language","suggestionsPaperProps","onSelect","accessToken","onInputFocus","onInputBlur","inputClasses","inputProps","inputPropsParam","textFieldProps","inputPaperProps","results","setResults","loading","setLoading","searchTime","setSearchTime","Date","setValue","inputIsFocused","setInputIsFocused","autoSuggestRef","useRef","prevValue","ref","current","usePrevious","focusInput","useCallback","input","focus","handleClearInput","theme","useTheme","renderInput","renderInputProps","other","_objectWithoutPropertiesLoose","_excluded","restInputPaperProps","searchInput","classes","inputRef","Fragment","Paper","square","elevation","sx","paddingTop","paddingBottom","paddingRight","paddingLeft","backgroundColor","palette","background","paper","alpha","overflow","minHeight","display","flexDirection","justifyContent","Box","alignItems","flex","flexShrink","flexGrow","length","unmountOnExit","mountOnEnter","IconButton","onClick","size","CancelIcon","focusInputHandler","e","blurInputHandler","renderSuggestionsContainer","options","containerProps","children","onResult","err","fc","st","features","map","feature","label","place_name","filter","handleSuggestionsFetchRequested","query","baseUrl","searchParams","access_token","Object","keys","longitude","latitude","join","url","params","key","encodeURIComponent","res","fetch","json","search","handleSuggestionSelected","_event","suggestion","handleSuggestionsClearRequested","handleChange","newValue","renderSuggestion","isHighlighted","matches","match","parts","parse","MenuItem","selected","component","Typography","noWrap","variant","part","index","fontWeight","highlight","text","getResultValue","result","zIndex","marginTop","left","right","margin","padding","listStyleType","marginBottom","Autosuggest","renderInputComponent","suggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","getSuggestionValue","placeholder","onChange","onFocus","onBlur","className"],"mappings":"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"}